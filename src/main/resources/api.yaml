openapi: "3.0.0"
info:
  title: Lazychef
  version: 1.0.0
  description: Lazychef API
paths:
#####  ##### UserService #####  #####
  /users/{id}:
    get:
      operationId: getUserDetails
      description: Get user details
      parameters:
        - in: path
          name: id
          description: The ID of the specific user for which you want details.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: User with this id was not found.
          content:
            application/json:
              schema:
                type: string

#####  ##### TaskService #####  #####
  /task:
    post:
      operationId: createTask
      description: Create task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                type: string
    patch:
      operationId: patchTask
      description: Patch some values of the task
      parameters:
        - in: path
          name: taskId
          description: The ID of the specific task for which you want details
          example: 32355082-8fcf-422c-be53-fd7d0c478c86
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskDetails"
      responses:
        '200':
          description: Task has been patched
          content:
            application/json:
              schema:
                type: string

  /task/{taskId}:
    get:
      operationId: getTask
      description: Get task
      parameters:
        - in: path
          name: taskId
          description: The ID of the specific task for which you want details
          example: 32355082-8fcf-422c-be53-fd7d0c478c86
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
        '404':
          description: Task with this id was not found
          content:
            application/json:
              schema:
                type: string

    delete:
      operationId: deleteTask
      description: Delete task
      parameters:
        - in: path
          name: taskId
          description: The ID of the specific task which you want to delete
          example: 32355082-8fcf-422c-be53-fd7d0c478c86
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Task deleted
          content:
            application/json:
              schema:
                type: string

  /task/{boardId}/tasks:
    get:
      operationId: getBoardTasks
      description: Get all tasks assigned to board
      parameters:
        - in: path
          name: boardId
          description: The ID of the specific board for which you want details
          example: '32355082-8ccf-422c-be53-fd7d0c478c86'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Board tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDetails'
        '404':
          description: Board with this id was not found
          content:
            application/json:
              schema:
                type: string

#####  ##### BoardService #####  #####


components:
  schemas:
#####  ##### UserService #####  #####
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    UserDetails:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
      required:
        - id
        - username
        - name
        - surname
        - email

#####  ##### TaskService #####  #####
    TaskStatus:
      type: string
      enum:
        - TODO
        - DOING
        - ON_HOLD
        - DONE
    Task:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        reporterId:
          type: string
          example: 'e4114b4e-0296-44e3-9958-099b2abf254b'
        assigneeId:
          type: string
          example: '250e59da-f641-432d-8a6a-4fde276dd667'
        boardId:
          type: string
          example: '32355082-8ccf-422c-be53-fd7d0c478c86'
    TaskDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        reporterId:
          type: string
        assigneeId:
          type: string
        boardId:
          type: string
        createdAt:
          type: string
          format: date-time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-01-30T08:30:00Z"

#####  ##### BoardService #####  #####

